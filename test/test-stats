#!/usr/bin/env node

const assert = require('assert');
const fs = require('fs');
const path = require('path');
const rimraf2 = require('rimraf2');
const readdirp = require('readdirp');
const Iterator = require('fs-iterator');
const generate = require('fs-generate');
const statsSpys = require('fs-stats-spys');

var TEST_DIR = path.resolve(path.join(__dirname, '..', '..', '.tmp', 'test'));
var STRUCTURE = {
  file1: 'a',
  file2: 'b',
  dir1: null,
  'dir2/file1': 'c',
  'dir2/file2': 'd',
  'dir3/dir4/file1': 'e',
  'dir3/dir4/dir5': null,
  filelink1: '~dir3/dir4/file1',
  'dir3/filelink2': '~dir2/file1',
};

function assertSpys(spys, options) {
  if (options.lstat) {
    assert.equal(spys.file.callCount, 5, JSON.stringify(options));
    assert.equal(spys.link.callCount, 2, JSON.stringify(options));
  } else {
    assert.equal(spys.file.callCount, 7, JSON.stringify(options));
    assert.equal(spys.link.callCount, 0, JSON.stringify(options));
  }
}

async function testReaddirp(options) {
  const spys = statsSpys();
  for await (const entry of readdirp(TEST_DIR, options)) {
    spys(fs.Dirent && !options.alwaysStat ? entry.dirent : entry.stats);
  }
  assertSpys(spys, options);
}

async function testIterator(options) {
  const spys = statsSpys();
  for await (const entry of new Iterator(TEST_DIR, options)) {
    spys(entry.stats);
  }
  assertSpys(spys, options);
}

(async () => {
  await new Promise((resolve) => rimraf2(TEST_DIR, { disableGlob: true }, (err) => resolve()));
  await generate(TEST_DIR, STRUCTURE);

  await testReaddirp({ lstat: true });
  // await testReaddirp({ lstat: false });
  await testReaddirp({ lstat: true, alwaysStat: true });
  await testReaddirp({ lstat: false, alwaysStat: true });
  await testIterator({ lstat: true });
  // await testIterator({ lstat: false });
  await testIterator({ lstat: true, alwaysStat: true });
  await testIterator({ lstat: false, alwaysStat: true });
})();
